---
import { type CollectionEntry } from "astro:content";
import BlogPost from "@layouts/BlogPost.astro";
import Layout from "@layouts/Layout.astro";
import BlogGrid from "@components/BlogGrid.astro";
import BlogSharingAndReactions from "@components/BlogSharingAndReactions.astro";
import { getAllPosts, getRelatedPosts } from "@utils/getPosts.ts";
import "@styles/blog-grid.css";

// astro takes care of filtering the blog posts
export async function getStaticPaths() {
  const posts = await getAllPosts({ includeHidden: true });
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;

const { Content } = await post.render();
const { title, summary } = post.data;
const id = post.id; // Access the id from post object instead of post.data

// Type assertion for metadata to avoid TypeScript errors
type MetadataType = { frontmatter?: { lang?: string } };
const metadata = (
  post.rendered && post.rendered.metadata ? post.rendered.metadata : {}
) as MetadataType;

const isTurkish = post.id.startsWith("tr/");

export const prerender = true;
---

<script is:inline define:vars={{ isHidden: post.data.hidden }}>
  // Client-side check for hidden posts and preview parameter
  if (isHidden) {
    const params = new URLSearchParams(window.location.search);
    if (!params.has("preview")) {
      // Redirect to 404 page if post is hidden and no preview parameter
      window.location.href = "/404";
    }
  }
</script>

<Layout
  title={title}
  description={summary}
  lang={isTurkish ? "tr" : "en"}
  size="small"
  noContentWrapperClass
>
  <BlogPost
    {...post.data}
    slug={post.slug}
    content={post.body}
    isTurkish={isTurkish}
    frontmatter={metadata.frontmatter || {}}
  >
    <div class="main-content-wrapper">
      <Content />
    </div>
    <div class="mt-12">
      <BlogSharingAndReactions post={post} />

      {/* Related Posts Block */}
      {
        post.data.tags &&
          post.data.tags.length > 0 &&
          (await (async () => {
            const relatedPosts = await getRelatedPosts({
              slug: post.slug,
              language: isTurkish ? "tr" : "en",
              tags: post.data.tags || [],
              requireMatchingTag: true,
              randomize: true,
              limit: 6,
            });
            if (relatedPosts.length === 0) return null;
            return (
              <div class="mt-16">
                <h2 class="mb-6 font-secondary text-3xl">
                  {isTurkish ? "İlgili Yazılar" : "Related Posts"}
                </h2>
                <BlogGrid
                  posts={relatedPosts}
                  limit={6}
                  showFirstPostFull={false}
                  narrow={true}
                  useTurkish={isTurkish}
                />
              </div>
            );
          })())
      }
    </div>
  </BlogPost>
</Layout>
