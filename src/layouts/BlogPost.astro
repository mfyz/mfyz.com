---
import type { CollectionEntry } from "astro:content";
import { format } from "date-fns";
import Tags from "@components/Tags";
import readingTime from "reading-time";
import CoverImage from "@components/CoverImage.astro";
import path from "path";

const { title, date, imageURL, tags, content, slug } = Astro.props;

const time = readingTime(content);

// Helper function to format date without timezone adjustments
function formatDatePreserveDay(dateStr) {
  // Handle cases where dateStr might not be a string
  if (!dateStr) return '';
  
  // Convert to string if it's a Date object
  const dateString = dateStr instanceof Date ? dateStr.toISOString() : String(dateStr);
  
  try {
    // Extract year, month, day directly from the string to avoid timezone issues
    const [year, month, day] = dateString.split('T')[0].split('-').map(num => parseInt(num, 10));
    // Format the date to "Feb 1, 2023" style
    return format(new Date(year, month - 1, day), "MMM d, yyyy");
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return dateString; // Return original value if formatting fails
  }
}
---

<article
  class="prose prose-lg prose-orange mx-auto w-full lg:prose-xl marker:text-primary prose-headings:font-secondary prose-headings:font-normal prose-a:text-primary dark:prose-a:text-primary-light [&_a:has(img)]:after:content-none prose-a:after:content-['â†—'] prose-blockquote:border-primary prose-blockquote:bg-primary/10 dark:prose-blockquote:bg-primary/20 prose-blockquote:py-1 prose-img:aspect-video prose-img:w-full prose-img:rounded-md prose-img:bg-gray-500 prose-img:object-cover dark:prose-invert"
>
  <div class="not-prose -mx-4 mb-8 overflow-hidden sm:-mx-6 md:-mx-8 lg:-mx-12">
    <CoverImage
      imageURL={imageURL}
      slug={slug}
      size="large"
    />
  </div>

  <h1>{title}</h1>

  <div class="mb-4 flex items-center justify-between text-gray-500 dark:text-gray-400">
    <time class="shrink-0">
      {formatDatePreserveDay(date)}
    </time>

    <div class="flex items-center gap-6">
      <span class="flex items-center gap-1">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="size-6"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
        </svg>

        {time.text}
      </span>
    </div>
  </div>

  <Tags list={tags} />

  <slot />
</article>

<script>
  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  document.addEventListener("astro:page-load", () => {
    function attachCopyButtons() {
      const copyButtonLabel = "Copy";
      const codeBlocks = Array.from(document.querySelectorAll("pre"));

      for (const codeBlock of codeBlocks) {
        const wrapper = document.createElement("div");
        wrapper.style.position = "relative";

        const copyButton = document.createElement("button");
        copyButton.className =
          "copy-code absolute right-3 -top-3 rounded bg-gray-500 dark:bg-gray-700 py-1 px-2 text-base leading-4 text-xs text-white font-medium";
        copyButton.innerHTML = copyButtonLabel;
        codeBlock.setAttribute("tabindex", "0");
        codeBlock.appendChild(copyButton);

        // wrap codebock with relative parent element
        codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);

        copyButton.addEventListener("click", async () => {
          await copyCode({ block: codeBlock, button: copyButton });
        });
      }

      async function copyCode({
        block,
        button,
      }: {
        block: HTMLPreElement;
        button: HTMLButtonElement;
      }) {
        const code = block.querySelector("code");
        const text = code?.innerText;

        await navigator.clipboard.writeText(text ?? "");

        // visual feedback that task is completed
        button.innerText = "Copied";

        setTimeout(() => {
          button.innerText = copyButtonLabel;
        }, 1000);
      }
    }

    attachCopyButtons();
  });
</script>
