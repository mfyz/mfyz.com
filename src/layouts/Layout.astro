---
import { ViewTransitions } from "astro:transitions";
import { AstroFont } from "astro-font";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import "@styles/global.css";
import { SITE } from "@/consts";

interface Props {
  title?: string;
  description?: string;
  noProse?: boolean;
}

const { title, description, noProse = false } = Astro.props;

const pathname = Astro.url.pathname;
const {
  website,
  author,
  description: defaultDescription,
  ogImage,
  title: defaultTitle,
} = SITE;

// In Astro, MDX frontmatter is made available in Astro.props.frontmatter
const frontmatter = Astro.props.frontmatter || {};

// Extract title from frontmatter, props, or use default
const rawTitle = frontmatter.title || title || defaultTitle;
const pageDescription = frontmatter.description || description || defaultDescription;

// Format title consistently: "Page Title - mfyz.com" for pages with custom titles
const formattedTitle = rawTitle !== defaultTitle ? `${rawTitle} - mfyz.com` : defaultTitle;

// Log for debugging purposes
const titleSource = frontmatter.title ? 'frontmatter' : (Astro.props.title ? 'props' : 'default');
console.log(`Page: ${pathname}, Title: ${formattedTitle}, Source: ${titleSource}`);

const ogImageBasedOnPath = pathname === "/" ? ogImage : `${pathname}og.png`;

const proseClasses = `prose prose-lg prose-orange lg:prose-xl marker:text-primary prose-headings:font-secondary
  prose-headings:font-normal prose-a:text-primary dark:prose-a:text-primary-light prose-a:after:content-['â†—']
  prose-blockquote:border-primary prose-blockquote:bg-primary/10 dark:prose-blockquote:bg-primary/20
  prose-blockquote:py-1 prose-img:rounded-md prose-img:hover:scale-105 prose-img:transition-transform dark:prose-invert`;

---

<!doctype html>
<html>
  <head>
    <link rel="preconnect" href="https://fonts.googleapis.com"/>
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
    <link href="https://fonts.googleapis.com/css2?family=Pridi&family=Rubik:ital@0;1&display=swap" rel="stylesheet"/>

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#f5f5f4" media="(prefers-color-scheme: light)"/>
    <meta name="theme-color" content="#1f2937" media="(prefers-color-scheme: dark)"/>

    <link rel="icon" href="/favicon.ico" type="image/x-icon" sizes="200x200" />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- General Meta Tags -->
    <title>{formattedTitle}</title>
    <meta name="title" content={formattedTitle} />
    <meta name="description" content={pageDescription} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={formattedTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:url" content={`${website}/`} />
    <meta property="og:image" content={website + ogImageBasedOnPath} />
    <meta property="og:image:height" content="600" />
    <meta property="og:image:width" content="800" />
    <meta property="og:locale" content="en_US" />
    <meta property="og:type" content="website" />

    <!-- Twitter -->
    <meta property="twitter:title" content={formattedTitle} />
    <meta property="twitter:description" content={pageDescription} />
    <meta property="twitter:image" content={website + ogImageBasedOnPath} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image:width" content="800" />
    <meta name="twitter:image:height" content="600" />

    {import.meta.env.PUBLIC_VERCEL_ENV === 'production' && (
      <>
        <script async src="https://www.googletagmanager.com/gtag/js?id=G-MP2JXY39CE"></script>
        <script is:inline>
          const isAdmin = document.cookie.includes('mfyz_admin=');
          if (!isAdmin) {
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'G-MP2JXY39CE');
          }
        </script>
      </>
    )}

    <ViewTransitions />
  </head>

  <body
    class="grid min-h-screen grid-rows-[1fr_auto] bg-white text-text dark:bg-gray-900 dark:text-gray-200"
    style="scrollbar-gutter: stable"
  >
    <Header />
    <main
      class="container mt-24 overflow-hidden pb-4"
      style="scrollbar-gutter: stable"
    >
      <div class={`main-content-wrapper mx-auto max-w-6xl ${!noProse ? proseClasses : ''}`}>
        <slot />
      </div>
    </main>

    <script>
      /** Attaches copy buttons to code blocks in the document,
       * allowing users to copy code easily. */
      document.addEventListener("astro:page-load", () => {
        function attachCopyButtons() {
          const copyButtonLabel = "Copy";
          const codeBlocks = Array.from(document.querySelectorAll("pre"));

          for (const codeBlock of codeBlocks) {
            const wrapper = document.createElement("div");
            wrapper.style.position = "relative";

            const copyButton = document.createElement("button");
            copyButton.className =
              "copy-code absolute right-3 -top-3 rounded bg-gray-500 dark:bg-gray-700 py-1 px-2 text-base leading-4 text-xs text-white font-medium";
            copyButton.innerHTML = copyButtonLabel;
            codeBlock.setAttribute("tabindex", "0");
            codeBlock.appendChild(copyButton);

            // wrap codebock with relative parent element
            codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
            wrapper.appendChild(codeBlock);

            copyButton.addEventListener("click", async () => {
              await copyCode({ block: codeBlock, button: copyButton });
            });
          }

          async function copyCode({ block, button }) {
            let code = block.querySelector("code");
            let text = code?.innerText;

            await navigator.clipboard.writeText(text);

            // Visual feedback that task is completed
            button.innerHTML = "Copied!";

            setTimeout(() => {
              button.innerHTML = copyButtonLabel;
            }, 700);
          }
        }

        attachCopyButtons();
      });
    </script>

    <Footer />
  </body>
</html>
