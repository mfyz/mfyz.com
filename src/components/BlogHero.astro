---
import { format } from "date-fns";
import { getPatternName } from "@utils/get-pattern-name";
import readingTime from "reading-time";
import Tags from "@components/Tags.astro";
import "@styles/blog-grid.css";

// Turkish month names for localization
const turkishMonths = {
  Jan: "Ocak",
  Feb: "Şubat",
  Mar: "Mart",
  Apr: "Nisan",
  May: "Mayıs",
  Jun: "Haziran",
  Jul: "Temmuz",
  Aug: "Ağustos",
  Sep: "Eylül",
  Oct: "Ekim",
  Nov: "Kasım",
  Dec: "Aralık",
};

// Full English month names for enhanced formatting
const fullEnglishMonths = {
  Jan: "January",
  Feb: "February",
  Mar: "March",
  Apr: "April",
  May: "May",
  Jun: "June",
  Jul: "July",
  Aug: "August",
  Sep: "September",
  Oct: "October",
  Nov: "November",
  Dec: "December",
};

export interface Props {
  title: string;
  date: string;
  slug: string;
  content: string;
  tags: string[];
  lang?: string; // Optional language property (tr for Turkish)
}

const { title, date, slug, content, tags, lang } = Astro.props;
// Check both lang prop and URL path for Turkish
const isTurkish = lang === "tr" || Astro.url.pathname.startsWith("/tr/");

// Get the pattern based on slug
const patternName = getPatternName(slug);
// Use the white pattern variant for the dark background
const patternClass = `blog-bg-pattern blog-bg-pattern-${patternName}-white`;

// Calculate reading time
const time = readingTime(content);

// Helper function to format date without timezone adjustments
function formatDatePreserveDay(dateStr: string | Date, useTurkish = false) {
  // Handle cases where dateStr might not be a string
  if (!dateStr) return "";

  // Convert to string if it's a Date object
  const dateString =
    dateStr instanceof Date ? dateStr.toISOString() : String(dateStr);

  try {
    // Extract year, month, day directly from the string to avoid timezone issues
    const [year, month, day] = dateString
      .split("T")[0]
      .split("-")
      .map(num => parseInt(num, 10));
    const dateObj = new Date(year, month - 1, day);

    if (useTurkish) {
      // Format with just the day number first
      const dayStr = format(dateObj, "d");
      // Get month abbreviation and translate
      const monthAbbr = format(dateObj, "MMM");
      const turkishMonth = turkishMonths[monthAbbr] || monthAbbr;
      // Add the year
      return `${turkishMonth} ${dayStr}, ${year}`;
    } else {
      // Full English month with day and year
      const monthAbbr = format(dateObj, "MMM");
      const fullMonth = fullEnglishMonths[monthAbbr] || monthAbbr;
      return `${fullMonth} ${format(dateObj, "d, yyyy")}`;
    }
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return dateString; // Return original value if formatting fails
  }
}
---

<!-- Important: Keep the transition:name on this element to preserve animations -->
<div class="blog-grid">
  <div
    class={`rounded-lg w-full bg-[#222] text-white p-12 mb-10 ${patternClass}`}
    transition:name={slug}
  >
    <div class="mx-auto max-w-4xl">
      <div class="mb-4 flex items-center justify-between text-gray-300">
        <time class="shrink-0">
          {formatDatePreserveDay(date, isTurkish)}
        </time>

        <div class="flex items-center gap-6">
          <span class="flex items-center gap-1">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="size-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
            </svg>

            {isTurkish ? `${Math.ceil(time.minutes)} dk okuma` : time.text}
          </span>
        </div>
      </div>

      <h1
        class="max-w-3xl font-secondary text-4xl font-normal text-white md:text-5xl"
      >
        {title}
      </h1>

      <div class="mt-6">
        <Tags list={tags} className="tags-light" />
      </div>
    </div>
  </div>
</div>
