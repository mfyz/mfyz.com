---
// ImageZoom.astro - Pure vanilla JavaScript implementation with zero dependencies

// Get props from the component invocation
const {
  src,
  alt,
  width,
  height,
  class: className,
  maxZoomWidth,
  caption = "",
} = Astro.props;

// Create a unique ID for this image to help with targeting
const uniqueId = `image-${Math.random().toString(36).substring(2, 9)}`;
const dialogId = `${uniqueId}-dialog`;

// Calculate maximum width for zoomed image
const zoomedMaxWidth = maxZoomWidth ? `${maxZoomWidth}px` : "95vw";

// Detect if default children are provided and whether caption prop is a renderable string
const hasDefaultSlot = Astro.slots?.has?.("default") ?? false;
const captionIsString =
  typeof caption === "string" && caption.trim().length > 0;
// Calculate aspect ratio if both width and height are provided
// const aspectRatio = width && height ? width / height : null;
// const aspectRatioStyle = aspectRatio ? `aspect-ratio: ${aspectRatio};` : '';
---

<!-- Thumbnail image that triggers the zoom dialog -->
<button
  id={uniqueId}
  class="m-0 block w-full cursor-zoom-in p-0 focus:outline-none"
  aria-label="Click to zoom image"
>
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    class={`transition-transform hover:scale-105 block ${className || ""}`}
  />
</button>

{
  (hasDefaultSlot || captionIsString) && (
    <div class="-mt-3 mb-2 text-center text-sm italic text-gray-600 opacity-70 dark:text-gray-400">
      {hasDefaultSlot ? <slot /> : caption}
    </div>
  )
}

<!-- Dialog for the zoomed image -->
<dialog
  id={dialogId}
  class="fixed inset-0 z-50 overflow-hidden bg-transparent p-4 backdrop:bg-black/80"
  aria-labelledby={`${uniqueId}-title`}
>
  <div class="flex h-full w-full items-center justify-center">
    <div class="relative">
      <!-- Close button -->
      <button
        id={`${dialogId}-close`}
        class="absolute -right-4 -top-4 z-10 rounded-full bg-gray-800 p-2 text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-400"
        aria-label="Close zoomed image"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
            clip-rule="evenodd"></path>
        </svg>
      </button>

      <!-- Zoomed image -->
      <img
        id={`${dialogId}-image`}
        src={src}
        alt={alt}
        style={`max-width: ${zoomedMaxWidth}; max-height: 95vh;`}
        class="m-0 block bg-white object-contain p-0 focus:outline-none"
        tabindex="0"
      />

      <!-- Image caption/alt text -->
      <div id={`${uniqueId}-title`} class="sr-only">{alt}</div>
    </div>
  </div>
</dialog>

<script is:inline define:vars={{ uniqueId, dialogId }}>
  document.addEventListener("astro:page-load", () => {
    const imageButton = document.getElementById(uniqueId);
    const dialog = document.getElementById(dialogId);
    const closeButton = document.getElementById(`${dialogId}-close`);
    const zoomedImage = document.getElementById(`${dialogId}-image`);

    if (!imageButton || !dialog || !closeButton || !zoomedImage) {
      console.error("ImageZoom: Required elements not found");
      return;
    }

    // Show dialog when thumbnail is clicked
    imageButton.addEventListener("click", () => {
      dialog.showModal();
      // Focus on the image for keyboard accessibility
      zoomedImage.focus();
    });

    // Close dialog when close button is clicked
    closeButton.addEventListener("click", () => {
      dialog.close();
      // Remove focus to prevent outline from showing after closing
      closeButton.blur();
    });

    // Close dialog when clicking outside the image
    dialog.addEventListener("click", event => {
      const rect = zoomedImage.getBoundingClientRect();
      const isInDialog =
        rect.top <= event.clientY &&
        event.clientY <= rect.top + rect.height &&
        rect.left <= event.clientX &&
        event.clientX <= rect.left + rect.width;

      if (!isInDialog && event.target === dialog) {
        dialog.close();
      }
    });

    // Support keyboard navigation
    dialog.addEventListener("keydown", event => {
      if (event.key === "Escape") {
        dialog.close();
      }
    });
  });
</script>
