---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<div class="collapsible border-b border-gray-200 last:border-none">
  <button class="collapsible-toggle flex w-full items-center gap-3 py-4 text-left" type="button">
    <svg
      class="collapsible-arrow h-4 w-4 flex-shrink-0 transition-transform duration-200"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true"
    >
      <path
        fill-rule="evenodd"
        d="M7.293 4.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L10.586 9 7.293 5.707a1 1 0 010-1.414z"
        clip-rule="evenodd"
      />
    </svg>
    <span class="font-medium">{title}</span>
  </button>
  <div class="collapsible-content hidden overflow-hidden">
    <div class="pl-7 pb-6">
      <slot />
    </div>
  </div>
</div>

<script>
  // This script runs on the client automatically
  document.addEventListener('astro:page-load', () => {
    // Get all collapsible elements
    const collapsibles = document.querySelectorAll('.collapsible');
    
    collapsibles.forEach(collapsible => {
      const toggle = collapsible.querySelector('.collapsible-toggle');
      const content = collapsible.querySelector('.collapsible-content');
      const arrow = collapsible.querySelector('.collapsible-arrow');
      
      if (toggle && content && arrow) {
        toggle.addEventListener('click', () => {
          // Toggle content visibility
          content.classList.toggle('hidden');
          
          // Toggle arrow rotation
          arrow.classList.toggle('rotate-90');
          
          // Update aria-expanded attribute
          const isExpanded = !content.classList.contains('hidden');
          toggle.setAttribute('aria-expanded', isExpanded.toString());
        });
      }
    });
  });
</script>
