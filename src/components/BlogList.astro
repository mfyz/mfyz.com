---
import { format, parseISO } from "date-fns";
import Tags from "@components/Tags.jsx";
import CoverImage from "@components/CoverImage.astro";
import { getPatternName } from "@utils/get-pattern-name";
import "../styles/blog-list.css";

interface Props {
  posts: any[];
}

const { posts } = Astro.props;

// Helper function to format date without timezone adjustments (copied from BlogGrid for consistency)
function formatDatePreserveDay(dateStr) {
  // Handle cases where dateStr might not be a string
  if (!dateStr) return '';
  
  // Convert to string if it's a Date object
  const dateString = dateStr instanceof Date ? dateStr.toISOString() : String(dateStr);
  
  try {
    // Extract year, month, day directly from the string to avoid timezone issues
    const [year, month, day] = dateString.split('T')[0].split('-').map(num => parseInt(num, 10));
    // Format the date to "Feb 1, 2023" style
    return format(new Date(year, month - 1, day), "MMM d, yyyy");
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return dateString; // Return original value if formatting fails
  }
}

// Group posts by year
const getYear = (date) => {
  if (!date) return '';
  return new Date(date).getFullYear();
};

// Group posts by year
const postsByYear = posts.reduce((acc, post) => {
  const year = getYear(post.data.date);
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {});

// Sort years in descending order
const sortedYears = Object.keys(postsByYear).sort((a, b) => b - a);
---

<div class="blog-list mt-12 border border-gray-200">
  {sortedYears.map(year => (
    <div class="year-section">
      <div class="year-header">
        <h2 class="font-secondary text-5xl py-4 px-6 backdrop-blur-sm bg-white/80 dark:bg-gray-900/80 supports-[backdrop-filter]:bg-white/60 dark:supports-[backdrop-filter]:bg-gray-900/60">{year}</h2>
      </div>
      <ul>
        {postsByYear[year].map((post) => {
          const { title, date, tags } = post.data;
          const patternName = getPatternName(post.slug);
          return (
            <li>
              <div 
                class={`p-6 border-b border-gray-200 blog-bg-pattern blog-bg-pattern-${patternName}`}
                transition:name={post.slug}
              >
                <div class="flex items-center text-xs text-gray-500 whitespace-nowrap">
                  <time>{formatDatePreserveDay(date)}</time>
                  {/* <Tags list={tags} /> */}
                </div>
                <a href={`/${post.slug}/`}>
                  <h4 class="font-secondary text-4xl transition-colors hover:text-primary">
                    {title}
                  </h4>
                </a>
              </div>
            </li>
          );
        })}
      </ul>
    </div>
  ))}
</div>
