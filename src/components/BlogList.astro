---
import { format } from "date-fns";
import readingTime from "reading-time";

// Turkish month names for localization
const turkishMonths = {
  Jan: "Ocak",
  Feb: "Şubat",
  Mar: "Mart",
  Apr: "Nisan",
  May: "Mayıs",
  Jun: "Haziran",
  Jul: "Temmuz",
  Aug: "Ağustos",
  Sep: "Eylül",
  Oct: "Ekim",
  Nov: "Kasım",
  Dec: "Aralık",
};

// Full English month names for enhanced formatting
const fullEnglishMonths = {
  Jan: "January",
  Feb: "February",
  Mar: "March",
  Apr: "April",
  May: "May",
  Jun: "June",
  Jul: "July",
  Aug: "August",
  Sep: "September",
  Oct: "October",
  Nov: "November",
  Dec: "December",
};
// Tags component not used in this file
import { getPatternName } from "@utils/get-pattern-name";
import "../styles/blog-list.css";

interface Props {
  posts: any[];
}

const { posts } = Astro.props;

// Get the current page path to determine language
const pathname = Astro.url.pathname;
// Check if exact /tr or under /tr/ directory
const isTurkish = pathname === "/tr" || pathname.startsWith("/tr/");

// Helper function to format date without timezone adjustments
function formatDatePreserveDay(dateStr: string, useTurkish = false) {
  // Handle cases where dateStr might not be a string
  if (!dateStr) return "";

  // Convert to string if it's a Date object
  // Use type assertion to fix TypeScript error with instanceof
  const dateString =
    typeof dateStr === "object" && dateStr !== null
      ? (dateStr as Date).toISOString()
      : String(dateStr);

  try {
    // Extract year, month, day directly from the string to avoid timezone issues
    const [year, month, day] = dateString
      .split("T")[0]
      .split("-")
      .map(num => parseInt(num, 10));
    const dateObj = new Date(year, month - 1, day);

    if (useTurkish) {
      // Format with just the day number first
      const dayStr = format(dateObj, "d");
      // Get month abbreviation and translate
      const monthAbbr = format(dateObj, "MMM");
      const turkishMonth = turkishMonths[monthAbbr] || monthAbbr;
      // Add the year
      return `${turkishMonth} ${dayStr}, ${year}`;
    } else {
      // Full English month with day and year
      const monthAbbr = format(dateObj, "MMM");
      const fullMonth = fullEnglishMonths[monthAbbr] || monthAbbr;
      return `${fullMonth} ${format(dateObj, "d, yyyy")}`;
    }
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return dateString; // Return original value if formatting fails
  }
}

// Group posts by year
const getYear = (date: Date) => {
  if (!date) return "";
  return new Date(date).getFullYear();
};

// Group posts by year
const postsByYear = posts.reduce((acc, post) => {
  const year = getYear(post.data.date);
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {});

// Sort years in descending order (convert strings to numbers first)
const sortedYears = Object.keys(postsByYear).sort(
  (a, b) => Number(b) - Number(a)
);
---

<div class="blog-list mt-12 border border-gray-200">
  {
    sortedYears.map(year => (
      <div class="year-section">
        <div class="year-header">
          <h2 class="bg-white/80 px-6 py-4 font-secondary text-5xl backdrop-blur-sm supports-[backdrop-filter]:bg-white/60 dark:bg-gray-900/80 dark:supports-[backdrop-filter]:bg-gray-900/60">
            {year}
          </h2>
        </div>
        <ul>
          {postsByYear[year].map((post: any) => {
            const { title, date } = post.data; // tags removed as unused
            const patternName = getPatternName(post.slug);
            // Calculate reading time
            const time = post.body
              ? readingTime(post.body)
              : { minutes: 0, text: "0 min read" };
            return (
              <li>
                <div
                  class={`blog-bg-pattern border-b border-gray-200 p-6 blog-bg-pattern-${patternName}`}
                  transition:name={post.slug}
                >
                  <div class="flex items-center gap-4 whitespace-nowrap text-xs text-gray-500">
                    <time>{formatDatePreserveDay(date, isTurkish)}</time>
                    <span class="flex items-center gap-1">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1.5"
                        stroke="currentColor"
                        class="size-4"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"
                        />
                      </svg>
                      {isTurkish
                        ? `${Math.ceil(time.minutes)} dk okuma`
                        : time.text}
                    </span>
                    {/* <Tags list={tags} /> */}
                  </div>
                  <a href={`/${post.slug}/`}>
                    <h4 class="font-secondary text-4xl transition-colors hover:text-primary">
                      {title}
                    </h4>
                  </a>
                </div>
              </li>
            );
          })}
        </ul>
      </div>
    ))
  }
</div>
