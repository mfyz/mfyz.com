---
import { format } from "date-fns";
import readingTime from "reading-time";

// Turkish month names for localization
const turkishMonths = {
  Jan: "Ocak",
  Feb: "Şubat",
  Mar: "Mart",
  Apr: "Nisan",
  May: "Mayıs",
  Jun: "Haziran",
  Jul: "Temmuz",
  Aug: "Ağustos",
  Sep: "Eylül",
  Oct: "Ekim",
  Nov: "Kasım",
  Dec: "Aralık",
};

// Full English month names for enhanced formatting
const fullEnglishMonths = {
  Jan: "January",
  Feb: "February",
  Mar: "March",
  Apr: "April",
  May: "May",
  Jun: "June",
  Jul: "July",
  Aug: "August",
  Sep: "September",
  Oct: "October",
  Nov: "November",
  Dec: "December",
};
import { getPatternName } from "@utils/get-pattern-name";

interface Props {
  posts: any[];
  limit?: number;
  useTurkish?: boolean;
  showFirstPostFull?: boolean;
  narrow?: boolean;
}

const { posts, limit, showFirstPostFull = true, narrow = false } = Astro.props; // useTurkish removed as unused

// Get the current page path to determine language
const pathname = Astro.url.pathname;
// Check if exact /tr or under /tr/ directory
const isTurkish = pathname === "/tr" || pathname.startsWith("/tr/");
const displayPosts = limit ? posts.slice(0, limit) : posts;

// Helper function to format date without timezone adjustments
function formatDatePreserveDay(dateStr: string | Date, useTurkish = false) {
  // Handle cases where dateStr might not be a string
  if (!dateStr) return "";

  // Convert to string if it's a Date object
  const dateString =
    dateStr instanceof Date ? dateStr.toISOString() : String(dateStr);

  try {
    // Extract year, month, day directly from the string to avoid timezone issues
    const [year, month, day] = dateString
      .split("T")[0]
      .split("-")
      .map(num => parseInt(num, 10));
    const dateObj = new Date(year, month - 1, day);

    if (useTurkish) {
      // Format with just the day number first
      const dayStr = format(dateObj, "d");
      // Get month abbreviation and translate
      const monthAbbr = format(dateObj, "MMM");
      const turkishMonth = turkishMonths[monthAbbr] || monthAbbr;
      // Add the year
      return `${turkishMonth} ${dayStr}, ${year}`;
    } else {
      // Full English month with day and year
      const monthAbbr = format(dateObj, "MMM");
      const fullMonth = fullEnglishMonths[monthAbbr] || monthAbbr;
      return `${fullMonth} ${format(dateObj, "d, yyyy")}`;
    }
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return dateString; // Return original value if formatting fails
  }
}
---

<div>
  <div class="blog-grid">
    {/* First post - full width */}
    {
      showFirstPostFull &&
        displayPosts.length > 0 &&
        (() => {
          const post = displayPosts[0];
          const { title, date } = post.data; // tags removed as unused
          const patternName = getPatternName(post.slug);
          // Calculate reading time
          const time = post.body
            ? readingTime(post.body)
            : { minutes: 0, text: "0 min read" };
          return (
            <div
              class={`blog-bg-pattern bg-white p-10 pb-24 pt-10 dark:bg-[#aaa] blog-bg-pattern-${patternName}`}
              transition:name={post.slug}
            >
              <div class="mb-2 flex items-center gap-4 text-xs text-gray-500">
                <time>{formatDatePreserveDay(date, isTurkish)}</time>
                <span class="flex items-center gap-1">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="size-4"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"
                    />
                  </svg>
                  {isTurkish
                    ? `${Math.ceil(time.minutes)} dk okuma`
                    : time.text}
                </span>
              </div>
              <a href={`/${post.slug}/`} class="no-underline">
                <h3 class="font-secondary text-6xl transition-colors hover:text-primary">
                  {title}
                </h3>
              </a>
            </div>
          );
        })()
    }

    {/* Rest of the posts in checker pattern */}
    <ul class="grid gap-0 sm:grid-cols-3">
      {
        (!showFirstPostFull ? displayPosts : displayPosts.slice(1)).map(
          (post, index) => {
            const { title, date } = post.data; // imageURL, summary, tags removed as unused
            // Calculate reading time
            const time = post.body
              ? readingTime(post.body)
              : { minutes: 0, text: "0 min read" };
            const rowIndex = Math.floor(index / 3);
            const colIndex = index % 3;

            // Determine background color based on position
            let bgColor = "";
            let bgDark = false;
            if (rowIndex % 2 === 0) {
              // First row pattern: black - white - black
              if (colIndex % 2 === 0) {
                bgColor = "bg-[#222] text-white";
                bgDark = true;
              }
            } else {
              // Second row pattern: white - red - white
              if (colIndex === 1) {
                bgColor = "bg-primary text-white";
                bgDark = true;
              }
            }

            if (!bgColor) {
              bgColor = "bg-[#fafafa] dark:bg-[#999]";
            }

            const patternName = getPatternName(post.slug);
            const patternClass = `blog-bg-pattern blog-bg-pattern-${patternName}${bgDark ? "-white" : ""}`;

            let titleTextSizeClass = "";
            if (title.length > 60) {
              titleTextSizeClass = narrow ? "text-base" : "text-xl";
            } else if (title.length > 30) {
              titleTextSizeClass = narrow ? "text-lg" : "text-2xl";
            } else {
              titleTextSizeClass = narrow ? "text-xlg" : "text-3xl";
            }

            return (
              <li
                class={`relative transition-transform hover:scale-[1.02] ${bgColor} ${patternClass}`}
                transition:name={post.slug}
              >
                <div
                  class={`mb-2 flex items-center text-sm ${bgDark ? "text-gray-300" : "text-gray-500"} flex-wrap gap-3`}
                >
                  <time>{formatDatePreserveDay(date, isTurkish)}</time>
                  <span class="flex items-center gap-1">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="1.5"
                      stroke="currentColor"
                      class="size-3.5"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"
                      />
                    </svg>
                    {isTurkish
                      ? `${Math.ceil(time.minutes)} dk okuma`
                      : time.text}
                  </span>
                </div>
                <a
                  href={`/${post.slug}/`}
                  class={`block font-secondary ${titleTextSizeClass} mb-2 transition-colors ${bgDark ? "text-gray-100 hover:text-white" : "text-gray-800 hover:text-primary dark:text-gray-900"}`}
                >
                  {title}
                </a>
              </li>
            );
          }
        )
      }
    </ul>
  </div>
</div>
