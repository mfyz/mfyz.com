---
import { format, parseISO } from "date-fns";
import Tags from "@components/Tags";
import CoverImage from "@components/CoverImage.astro";

interface Props {
  posts: any[];
  limit?: number;
}

const { posts, limit } = Astro.props;
const displayPosts = limit ? posts.slice(0, limit) : posts;

// Helper function to format date without timezone adjustments
function formatDatePreserveDay(dateStr) {
  // Handle cases where dateStr might not be a string
  if (!dateStr) return '';
  
  // Convert to string if it's a Date object
  const dateString = dateStr instanceof Date ? dateStr.toISOString() : String(dateStr);
  
  try {
    // Extract year, month, day directly from the string to avoid timezone issues
    const [year, month, day] = dateString.split('T')[0].split('-').map(num => parseInt(num, 10));
    // Format the date to "Feb 1, 2023" style
    return format(new Date(year, month - 1, day), "MMM d, yyyy");
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return dateString; // Return original value if formatting fails
  }
}
---

<ul class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
  {
    displayPosts.map((post, index) => {
      const { title, date, imageURL, summary, tags } = post.data;
      return (
        <li>
          <a href={`/${post.slug}/`}>
            <CoverImage
              imageURL={imageURL}
              slug={post.slug}
              size="thumbnail"
              index={index}
            />
          </a>
          <div class="my-2 flex items-center justify-between">
            <Tags list={tags} />
            <time class="shrink-0 text-sm text-gray-500">
              {formatDatePreserveDay(date)}
            </time>
          </div>
          <a href={`/${post.slug}/`}>
            <h4 class="font-secondary text-2xl transition-colors hover:text-primary">
              {title}
            </h4>
          </a>
          <p class="text-gray-500">{summary}</p>
        </li>
      );
    })
  }
</ul>