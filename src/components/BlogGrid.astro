---
import { format, parseISO } from "date-fns";
import Tags from "@components/Tags";
import CoverImage from "@components/CoverImage.astro";

interface Props {
  posts: any[];
  limit?: number;
}

const { posts, limit } = Astro.props;
const displayPosts = limit ? posts.slice(0, limit) : posts;

// Helper function to format date without timezone adjustments
function formatDatePreserveDay(dateStr) {
  // Handle cases where dateStr might not be a string
  if (!dateStr) return '';
  
  // Convert to string if it's a Date object
  const dateString = dateStr instanceof Date ? dateStr.toISOString() : String(dateStr);
  
  try {
    // Extract year, month, day directly from the string to avoid timezone issues
    const [year, month, day] = dateString.split('T')[0].split('-').map(num => parseInt(num, 10));
    // Format the date to "Feb 1, 2023" style
    return format(new Date(year, month - 1, day), "MMM d, yyyy");
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return dateString; // Return original value if formatting fails
  }
}
---
<div>
  <div class="blog-grid">
    {/* First post - full width */}
    {displayPosts.length > 0 && (
      <div class="p-8">
        {(() => {
          const post = displayPosts[0];
          const { title, date, tags } = post.data;
          return (
            <div>
              <a href={`/${post.slug}/`}>
                <h3 class="font-secondary text-3xl mb-4 transition-colors hover:text-primary">
                  {title}
                </h3>
              </a>
              <div class="flex items-center justify-between">
                <Tags list={tags} />
                <time class="shrink-0 text-sm text-gray-500">
                  {formatDatePreserveDay(date)}
                </time>
              </div>
            </div>
          );
        })()}
      </div>
    )}

    {/* Rest of the posts in checker pattern */}
    <ul class="grid gap-0 md:grid-cols-3 border-t border-gray-150">
      {
        displayPosts.slice(1).map((post, index) => {
          const { title, date, imageURL, summary, tags } = post.data;
          const rowIndex = Math.floor(index / 3);
          const colIndex = index % 3;
          
          // Determine background color based on position
          let bgColor = "";
          if (rowIndex % 2 === 0) {
            // First row pattern: black - white - black
            bgColor = colIndex % 2 === 0 ? "bg-[#222] text-white" : "";
          } else {
            // Second row pattern: white - red - white
            bgColor = colIndex === 1 ? "bg-primary text-white" : "";
          }
          
          return (
            <li class={`relative p-5 transition-transform hover:scale-[1.02] ${bgColor}`}>
              <a href={`/${post.slug}/`}>
                <h4 class={`font-secondary text-2xl mb-2 transition-colors ${bgColor ? "hover:text-gray-300" : "hover:text-primary"}`}>
                  {title}
                </h4>
              </a>
              <div class="flex items-center justify-between">
                <Tags list={tags} />
                <time class={`shrink-0 text-sm ${bgColor ? "text-gray-300" : "text-gray-500"}`}>
                  {formatDatePreserveDay(date)}
                </time>
              </div>
            </li>
          );
        })
      }
    </ul>
  </div>
</div>