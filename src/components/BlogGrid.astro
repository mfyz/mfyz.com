---
import { format, parseISO } from "date-fns";

// Turkish month names for localization
const turkishMonths = {
  'Jan': 'Ocak',
  'Feb': 'Şubat',
  'Mar': 'Mart',
  'Apr': 'Nisan',
  'May': 'Mayıs',
  'Jun': 'Haziran',
  'Jul': 'Temmuz',
  'Aug': 'Ağustos',
  'Sep': 'Eylül',
  'Oct': 'Ekim',
  'Nov': 'Kasım',
  'Dec': 'Aralık'
};

// Full English month names for enhanced formatting
const fullEnglishMonths = {
  'Jan': 'January',
  'Feb': 'February',
  'Mar': 'March',
  'Apr': 'April',
  'May': 'May',
  'Jun': 'June',
  'Jul': 'July',
  'Aug': 'August',
  'Sep': 'September',
  'Oct': 'October',
  'Nov': 'November',
  'Dec': 'December'
};
import Tags from "@components/Tags";
import CoverImage from "@components/CoverImage.astro";
import { getPatternName } from "@utils/get-pattern-name";

interface Props {
  posts: any[];
  limit?: number;
}

const { posts, limit } = Astro.props;

// Get the current page path to determine language
const pathname = Astro.url.pathname;
// Check if exact /tr or under /tr/ directory
const isTurkish = pathname === '/tr' || pathname.startsWith('/tr/');
const displayPosts = limit ? posts.slice(0, limit) : posts;

// Helper function to format date without timezone adjustments
function formatDatePreserveDay(dateStr, useTurkish = false) {
  // Handle cases where dateStr might not be a string
  if (!dateStr) return '';
  
  // Convert to string if it's a Date object
  const dateString = dateStr instanceof Date ? dateStr.toISOString() : String(dateStr);
  
  try {
    // Extract year, month, day directly from the string to avoid timezone issues
    const [year, month, day] = dateString.split('T')[0].split('-').map(num => parseInt(num, 10));
    const dateObj = new Date(year, month - 1, day);
    
    if (useTurkish) {
      // Format with just the day number first
      const dayStr = format(dateObj, "d");
      // Get month abbreviation and translate
      const monthAbbr = format(dateObj, "MMM");
      const turkishMonth = turkishMonths[monthAbbr] || monthAbbr;
      // Add the year
      return `${turkishMonth} ${dayStr}, ${year}`;
    } else {
      // Full English month with day and year
      const monthAbbr = format(dateObj, "MMM");
      const fullMonth = fullEnglishMonths[monthAbbr] || monthAbbr;
      return `${fullMonth} ${format(dateObj, "d, yyyy")}`;
    }
  } catch (error) {
    console.error("Error formatting date:", dateString, error);
    return dateString; // Return original value if formatting fails
  }
}
---
<div>
  <div class="blog-grid">
    {/* First post - full width */}
    {displayPosts.length > 0 && (() => {
      const post = displayPosts[0];
      const { title, date, tags } = post.data;
      const patternName = getPatternName(post.slug);
      return (
        <div 
          class={`p-10 pt-10 pb-24 blog-bg-pattern blog-bg-pattern-${patternName}`}
          transition:name={post.slug}
        >
          <time class="block mb-2 text-xs text-gray-500">
            {formatDatePreserveDay(date)}
          </time>
          <a href={`/${post.slug}/`}>
            <h3 class="font-secondary text-6xl transition-colors hover:text-primary">
              {title}
            </h3>
          </a>
        </div>
      );
    })()}

    {/* Rest of the posts in checker pattern */}
    <ul class="grid gap-0 sm:grid-cols-3">
      {
        displayPosts.slice(1).map((post, index) => {
          const { title, date, imageURL, summary, tags } = post.data;
          const rowIndex = Math.floor(index / 3);
          const colIndex = index % 3;
          
          // Determine background color based on position
          let bgColor = "";
          let bgDark = false;
          if (rowIndex % 2 === 0) {
            // First row pattern: black - white - black
            if (colIndex % 2 === 0) {
              bgColor = "bg-[#222] text-white";
              bgDark = true;
            }
          } else {
            // Second row pattern: white - red - white
            if (colIndex === 1) {
              bgColor = "bg-primary text-white";
              bgDark = true;
            }
          }

          if (!bgColor) {
            bgColor = "bg-[#fafafa] dark:bg-[#f0f0f0]";
          }

          const patternName = getPatternName(post.slug);
          const patternClass = `blog-bg-pattern blog-bg-pattern-${patternName}${bgDark ? "-white" : ""}`;

          return (
            <li 
              class={`relative transition-transform hover:scale-[1.02] ${bgColor} ${patternClass}`}
              transition:name={post.slug}
            >
              <time class={`block mb-2 text-xs ${bgDark ? "text-gray-300" : "text-gray-500"}`}>
                {formatDatePreserveDay(date, isTurkish)}
              </time>
              <a href={`/${post.slug}/`}>
                <h4 class={`font-secondary mb-2 transition-colors ${bgDark ? "hover:text-gray-300" : "hover:text-primary"}`}>
                  {title}
                </h4>
              </a>
            </li>
          );
        })
      }
    </ul>
  </div>
</div>