## WRITING NEW BLOG POSTS

**IMPORTANT**: Blog post creation guidelines
- Blog posts are written in MDX format and stored in `src/content/blog/YYYY/` directories
- Required front matter fields:
  - `title`: Post title
  - `description`: Brief summary for SEO and previews
  - `slug`: URL-friendly identifier
  - `date`: Publication date in "YYYY-MM-DD" format
  - `tags`: Array of relevant categories
- Optional front matter fields:
  - `hidden: true`: For work-in-progress posts (not shown in listings)
  - `lang: "tr"`: For Turkish language posts
  - `status: ready`: Indicates post publication status (first versions can be `draft`)
- Access hidden/WIP posts by adding `?preview=1` to the URL. When writing or editing a blog post file, you can suggest the localhost URL in your output so I can CMD+Click to preview the post in the browser easily. Simply the localhost astro base url (with the port, default 4321) + slug of the post, and add ?preview=1 to the end if the post is hidden:true.
- Organize content with proper heading hierarchy (h2, h3, etc.)
- Use rich components where appropriate. See below for available components to use in mdx files.
- Prefix post filenames with date in YYYY-MM-DD format. Example: `2025-06-02-amazing-post.mdx`

## TURKISH CONTENT

**IMPORTANT**: The site supports both English and Turkish content. Unless, I specifically ask for it, only write in English. When writing in Turkish follow the rules below:
- Turkish posts are listed in `/tr` page
- Turkish posts are stored in `src/content/blog/tr/YYYY/` directories
- Turkish posts have `lang: "tr"` front matter property
- Turkish posts slugs don't have anything special, like prefix. They just follow same pattern as English posts.
- Language detection happens via:
- UI elements have Turkish translations already handled in the components and layout.
- Turkish RSS feed is available at `/tr/rss.xml`

### Available Rich Content Components:

- Even though there is Image component from "astro:assets", prefer using native markdown image syntax for simple images.
- `import ImageZoom from "@components/ImageZoom.astro";` - For zoomable larger images. If it's a screenshot, it's often large enough that it should be using this component.
- `import YouTube from "@components/YouTube.astro";` - For embedding YouTube videos
- `import CollapsibleText from "@components/CollapsibleText.astro";` - For expandable Q&A sections
- `import Note from "@components/Note.astro";` - For highlighted note sections
- `import Rating from "@components/Rating.astro";` - For displaying ratings
- `import Message from "@components/Message.astro";` - For message boxes. Message boxes has avatar and direction, so we can create left/right bubbles.
- If a component is not used in the blog body, don't import it at the mdx file. Only import the components that are used in the post.

### Table of Contents

- Use `## Table of Contents` heading in your MDX files
- The remark-toc plugin automatically generates a TOC from your headings
- Only h2 and h3 headings are included in the TOC
- Appropriate for longer posts with multiple sections

## GENERAL WRITING GUIDELINES

- Write in a conversational but professional tone
- Use short paragraphs (2-4 sentences) for better readability
- Prefer active voice over passive voice
- Include code examples where appropriate, properly formatted
- Use images to illustrate concepts when helpful
- If we can visualize it in drawings, like diagrams, even better.
- Break up long content with subheadings
- Provide real-world examples to explain abstract concepts
- End posts with a short summary, conclusion section or next steps section. But don't call it "Conclusion", find a creative way to call this section.
- Keep introductions concise and to the point
- Review for typos and grammar before publishing
- My writing style is
  - Conversational and personal
  - Uses first-person perspective
  - Includes practical, experiential advice
  - Incorporates images and visual components
  - Has clearly structured sections with headings
  - Occasionally uses emojis in headings
  - Practical and straightforward tone

## TRANSITION ANIMATIONS

**IMPORTANT**: Preserve the transition animations for hero areas
- This enables the zoom animation when navigating between:
  - Blog list and blog detail pages
  - App list and app detail pages
- Do not remove this attribute in future edits

## TYPOGRAPHY

**IMPORTANT**: Maintain Georgia font for headings
- tailwind.config.mjs: fontFamily.secondary must be ["Georgia", "serif"]
- This provides the distinct serif typography for all headings
- global.css should keep h1-h6 with font-secondary and font-normal classes

## OTHER VISUAL ELEMENTS

- Preserve hover animations (scale-105) on images
- Maintain the dark mode implementation
- Keep the consistent color scheme defined in global.css

These elements are core to the site's visual identity and user experience.
Please consult with Fatih before changing any of these design patterns.

<ExampleKitchenSinkPost>
---
hidden: true
title: Kitchensink Example
slug: kitchen-sink-example
date: 2025-02-18
summary: Everything you need to know
tags:
  - AwesomeTag
---

import H2 from "@components/H2.astro";
import Rating from "@components/Rating.astro";
import Message from "@components/Message.astro";
import YouTube from "@components/YouTube.astro";
import Note from "@components/Note.astro";
import Image from "@components/Image.astro";
import ImageZoom from "@components/ImageZoom.astro";

# Heading 1

Ea occaecat aliquip duis. Aliquip duis minim ut, sed veniam est reprehenderit.

<H2>Heading 2</H2>

Ut sed veniam est reprehenderit. Veniam est reprehenderit sint deserunt tempor consectetur.

<Rating count={4} />

Reprehenderit sint, deserunt tempor consectetur. Tempor consectetur incididunt anim. Incididunt anim deserunt, ullamco.

Standard markdown image: 
![Car](https://images.fastcompany.com/image/upload/f_webp,q_auto,c_fit/wp-cms-2/2024/07/p-1-91150764-google-waymo-one-self-driving-cars-san-francisco.jpg)

or with Image component

<Image
  src="https://images.fastcompany.com/image/upload/f_webp,q_auto,c_fit/wp-cms-2/2024/07/p-1-91150764-google-waymo-one-self-driving-cars-san-francisco.jpg"
  alt="Car"
  width={500}
  height={500}
/>

and ImageZoom component

<ImageZoom
  src="https://images.fastcompany.com/image/upload/f_webp,q_auto,c_fit/wp-cms-2/2024/07/p-1-91150764-google-waymo-one-self-driving-cars-san-francisco.jpg"
  alt="Car"
  width={500}
  height={500}
/>

In this process of learning i builded stuffðŸ”¥, which helped me to understand the things better way. Being **0.1% better every day** â€“ over a year, that adds up to a **36.5% improvement**

> Consistency is key. Show up every day, and amazing things will happenðŸŒž

Sit, ad ad nostrud est non est laborum. Nostrud est non, est laborum veniam ipsum. Est laborum veniam ipsum ullamco deserunt minim exercitation. Veniam, ipsum ullamco deserunt.

```sh
npx drizzle-kit push
```

Deserunt minim exercitation quis sed ex. Exercitation quis sed ex, velit. Ex velit aliqua quis ea. Aliqua quis ea, dolor voluptate sit dolore sit. Dolor voluptate sit, dolore. Dolore sit ullamco reprehenderit ut.

- Form auto-submission on-press of <kbd>Enter</kbd> key
- Accessing all actionable-items(example: Buttons, Links) with tab key

Ad ad nostrud est. Nostrud est non, est laborum veniam ipsum. Est laborum veniam ipsum ullamco deserunt minim exercitation. Veniam, ipsum ullamco deserunt. Deserunt minim exercitation quis sed ex. Exercitation quis sed ex, velit. Ex velit aliqua quis ea.

## Message format

<Message>
  Hi everyone, you might faced this issue while working with Javascript.
</Message>

<Message character="bender" direction="right">
  Most relatable! I faced this issue many times, how can we handle this?
</Message>

<Message>
- First of all, Javascript is not strongly typed language, so it get tricky to
  handle stuff like this. But, you can use **optional chaining** operator `?.` to
  handle this scenarios
- Let's take a example where you need to access value from API response

```javascript
const response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
const data = await response.json();

// If the data is undefined or null, we will get undefined as output
console.log("title: ", data?.title); // title: undefined
```

</Message>

<Message character="bender" direction="right">
  NiceðŸ‘Œ
</Message>

Ad nostrud est non est laborum, veniam. Non est laborum veniam ipsum ullamco deserunt. Laborum veniam, ipsum ullamco deserunt minim exercitation. Ullamco deserunt minim exercitation quis sed ex. Minim exercitation quis sed. Quis sed, ex velit aliqua quis.

## Youtube example

<YouTube id="P3C0iO1yqhk" />

## Note

<Note>This is a note</Note>

</ExampleKitchenSinkPost>